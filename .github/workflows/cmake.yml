name: ‚õ≤ Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    strategy:
      fail-fast: false
      matrix:
        os-settings: [{os: ubuntu-latest, name: linux, binary_path: /build/source/TattleTale_run,}
        ,{os: macos-latest,name: mac, binary_path: /build/source/TattleTale_run}
        ,{os: windows-latest,name: windows, binary_path: /build/source/Release/TattleTale_run.exe}]

    runs-on: ${{ matrix.os-settings.os }}

    steps:
    - uses: actions/checkout@v2

    - name: üç≥ Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: üöß Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: üéÅ Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: TattleTale_${{ matrix.os-settings.name }}
        path: |
          ${{ github.workspace }}${{ matrix.os-settings.binary_path }}
    - name: üí£ Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cd ${{github.workspace}}/build/test && ctest -C ${{env.BUILD_TYPE}}
      
